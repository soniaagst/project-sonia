classDiagram
    class GameController {
        - GameStatus _gameStatus
        - Board _board
        - List~IPlayer~ _players
        - int _currentTurnIndex
        - IPlayer _currentTurn
        - Display _display
        + event Action~IPlayer~? OnTurnChanged
        - int _fiftyMoveCounter = 0
        - Dictionary~string, int~ _boardHistory
        - List~Move~ _moveHistory
        + GameController(Display display, string whiteName, string blackName)
        + void Play()
        - void SwitchTurn()
        - List~Movement~ GetLegalMove(IPlayer)
        - bool ValidateMove(Movement)
        - bool MakeMove(Movement)
        - void PlayerMove(Piece movingPiece, Piece? killedPiece, Pawn? promotedPawn, Movement move)
        - Piece Promote(Pawn promotedPawn)
        - void SaveBoardState()
        - void SetPlayerGameStatus()
        - bool IsChecked(IPlayer player)
        - bool IsInsufficientMaterial()
        - bool IsThreeRepetition()
    }

    class Display {
        + void DisplayBoard(Board board, Box? lastMoveOrigin)
        + void DisplayHistory(List~Move~ moveHistory)
        + void DisplayMessage(string message)
        + string AskNonNullInput(string message)
        + bool TryParseInput(string input, out Movement? movement)
        + PromoteOption AskPromotionChoice()
    }

    class Board {
        - Piece?[,] _boxes
        + Board()
        + Piece?[,] GetBoard()
        + List~Piece~ GetPieces()
        + Piece? GetPieceAt(Box position)
        + static bool IsInsideBoard(Box position)
        + bool MovePiece(Box from, Box to, Action onMoveMade)
        + void KillPiece(Piece targetPiece)
        + bool IsUnderAttack(Box position, Colors color)
        + bool IsFriendlyPieceAt(Box position, Colors color)
        + King? FindKing(Colors color)
        + void SimulateMove(Box from, Box to)
        + void UndoSimulation(Box origin, Box simulatedmove, Piece? killedPiece)
        + string GenerateBoardState()
    }

    class Piece {
        <<abstract>>
        + Colors Color
        + bool IsKilled
        + bool IsMoved
        + Box CurrentPosition
        + Piece(Colors color, Box position)
        + abstract List<Position> GetValidMoves(Board board)
        + override string ToString()
    }

    class Pawn {
        + bool CanEnPassant
        + bool JustForwardTwo
        + override GetValidMoves()
    }

    class Knight {
        + override GetValidMoves()
    }

    class Bishop {
        + override GetValidMoves()
    }

    class Rook {
        + override GetValidMoves()
    }

    class Queen {
        + override GetValidMoves()
    }

    class King {
        + bool IsChecked
        + override GetValidMoves()
        - void TryAddCastlingMove()
    }

    class Player {
        + string PlayerName
        + Colors Color
        + PlayerStatus Status
        + Player(string name, Colors color)
        + bool HasValidMove()
    }

    class Movement {
        <<struct>>
        + Box From
        + Box To
    }

    class Move {
        + Piece? Piece
        + Box Destination
        + bool IsKill
        + bool IsCheck
        + bool IsShortCastle
        + bool IsLongCastle
        + bool IsPromotion
        + Piece? PromotedPiece
    }

    class Box {
        <<struct>>
        + int Y
        + int X
        + Box(int y, int x)
        + Colors GetBoxColor()
        + override string ToString()
    }

    class GameStatus {
        <<enum>>
        Playing
        Finished
    }

    class PlayerStatus {
        <<enum>>
        Normal, Checked,
        Checkmate, Won,
        Stalemate, Draw,
        Resigned
    }

    class PromoteOption {
        <<enum>>
        Queen, Rook,
        Bishop, Knight
    }

    class Colors {
        <<enum>>
        White, Black
    }

    class IPlayer {
        <<interface>>
        + string Name
        + Colors Color
        + PlayerStatus Status
        + bool HasValidMove ()
    }

    class IDisplay {
        <<interface>>
        + void DisplayBoard(Board board)
        + void DisplayMessage(string message) 
        + string AskNonNullInput(string message)
        + bool TryParseMove(string input, out Movement? movement)
        + PromoteOption AskPromotionChoice()
    }

    GameController --> Board
    GameController --> IPlayer

    Board --> Piece
    
    Piece <|-- Pawn
    Piece <|-- Knight
    Piece <|-- Bishop
    Piece <|-- Rook
    Piece <|-- Queen
    Piece <|-- King
    
    Player --|> IPlayer
    Display --|> IDisplay
    
    Movement -- GameController
    IDisplay -- GameController
    PromoteOption -- GameController
    GameStatus -- GameController
    PlayerStatus -- Player
    Box --Piece
    Colors -- Piece