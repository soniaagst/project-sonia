classDiagram
    class GameController {
        - GameStatus _gameStatus
        - Board _board
        - List~Player~ _players
        - int _currentTurnIndex
        - Player _currentPlayer
        - Display _display
        - Action switchPlayer
        + GameController(Display display, string whiteName, string blackName)
        + void Play()
        - void Move(Movement)
        - void Kill(Piece targetPiece)
        - void HandlePromotion(Pawn pawn)
        - Piece CreatePromotedPiece(PromoteOption choice, Colors color, Position position)
        - void UpdateGameStatus()
        - bool IsInCheck(Player player)
        - bool IsInsufficientMaterial()
        - bool IsLegalMove(Movement)
        - List~Movement~ GetLegalMove(Player)
    }

    class Display {
        + void DisplayBoard(Board board, Position? lastMoveOrigin)
        + void DisplayMessage(string message)
        + string AskNonNullInput(string message)
        + bool TryParseInput(string input, out Movement? movement)
        + PromoteOption AskPromotionChoice()
    }

    class Board {
        - Piece?[,] _grid
        + Board()
        - void InitializeBoard()
        + Piece?[,] GetBoard()
        + Piece? GetPieceAt(Position position)
        + static bool IsInsideBoard(Position position)
        + bool MovePiece(Position currentPos, Position newPos, out Piece? killedPiece, out Pawn? promotedPawn)
        + void KillPiece(Piece targetPiece)
        + void ReplacePiece(Pawn pawn, Piece promotedPiece)
        + bool IsUnderAttack(Position position, Colors color)
        + bool IsFriendlyPieceAt(Position position, Colors color)
        + King? FindKing(Colors color)
        + void HandleCastling(King king)
        + void SimulateMove(Position from, Position to)
        + void UndoSimulation(Position origin, Position simulatedmove, Piece? killedPiece)
    }

    class Piece {
        <<abstract>>
        + Colors Color
        + bool IsKilled
        + bool IsMoved
        + Position CurrentPosition
        + Piece(Colors color, Position position)
        + abstract List<Position> GetValidMoves(Board board)
    }

    class Pawn {
        + bool CanEnPassant
        + bool JustForwardTwo
        + override GetValidMoves()
    }

    class Knight {
        + override GetValidMoves()
    }

    class Bishop {
        + override GetValidMoves()
    }

    class Rook {
        + override GetValidMoves()
    }

    class Queen {
        + override GetValidMoves()
    }

    class King {
        + bool IsChecked
        + override GetValidMoves()
        - void TryAddCastlingMove()
    }

    class Player {
        + string Name
        + Colors Color
        + PlayerStatus Status
        + Player(string name, Colors color)
        + bool HasValidMove()
    }

    class Movement {
        <<struct>>
        + position From
        + position To
    }

    class Position {
        <<struct>>
        + int Row
        + int Col
        + Position(int row, int col)
        + Colors GetSquareColor()
    }

    class GameStatus {
        <<enum>>
        Playing
        Finished
    }

    class PlayerStatus {
        <<enum>>
        Normal, Checked,
        Checkmate, Won,
        Stalemate, Draw,
        Resigned
    }

    class PromoteOption {
        <<enum>>
        Queen, Rook,
        Bishop, Knight
    }

    class Colors {
        <<enum>>
        White, Black
    }

    class IPlayer {
        <<interface>>
        + string Name
        + Colors Color
        + PlayerStatus Status
        + bool HasValidMove ()
    }

    class IDisplay {
        <<interface>>
        + void DisplayBoard(Board board)
        + void DisplayMessage(string message) 
        + string AskNonNullInput(string message)
        + bool TryParseMove(string input, out Movement? movement)
        + PromoteOption AskPromotionChoice()
    }

    GameController --> Board
    GameController --> IPlayer

    Board --> Piece
    
    Piece <|-- Pawn
    Piece <|-- Knight
    Piece <|-- Bishop
    Piece <|-- Rook
    Piece <|-- Queen
    Piece <|-- King
    
    Player --|> IPlayer
    Display --|> IDisplay
    
    Movement -- GameController
    IDisplay -- GameController
    PromoteOption -- GameController
    GameStatus -- GameController
    PlayerStatus -- Player
    Position --Piece
    Colors -- Piece