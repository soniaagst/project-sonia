classDiagram
    GameController --> IBoard : manages
    GameController --> IPlayer : manages
    GameController --> IPiece : manages placement
    GameController --> IDisplay
    GameState -- GameController
    Board *-- Piece : contains
    Board --> Position : uses
    Player --> Piece : owns
    Piece -- PieceColor
    IDisplay <|-- Display
    IBoard <|-- Board
    IPlayer <|-- Player
    IPiece <|-- Piece
    GameManager --> GameController

    class Display {
        + DisplayBoard(Board board, List~Position~ validMoves): void
        + DisplayMessage(string message): void
        + AskNonNullInput( ): void
    }

    class GameManager {
        - GameController _gameController
        + GameManager(Board board, Display display)
        + Play( ): void
    }
    note for GameManager "GameController instantiated in GameManager constructor.
    For further improvement, this can have options like:
    NewGame(), RestartGame(), SaveGame(), Exit()"

    class GameController {
        - IBoard _board
        - IPlayer[] _players
        - int _currentPlayer
        - GameState _gameState
        - IDisplay _display
        + Action SwitchTurn
        + Func~int row, int col~ IsInsideBoard: bool
        + GameController(IBoard board, IDisplay display)
        + PlacePiece(int row, int col, Player player): bool
        + GetFlippablePieces(int row, int col, Player player): List~Position~
        + IsValidMove(int row, int col, Player player): bool
        + GetValidMoves(Player player): List~Position~
        + TryParseMove(string input, out int row, out int col): bool
        + GetScoreCounts( ): (int blackCount, int whiteCount)
    }
    note for GameController "Player instantiated immediately in the constructor bcs there are always only 2 players.
    GetFlippablePieces(): Supposing user would make move in (row, col), list every piece that should be flipped.
    IsValidMove(): If a move (row, col) has flippablepieces, it's valid.
    GetValidMoves(): Loop the Positions in the board, and list every move that IsValidMove.
    PlacePiece(): If a move IsValidMove, place the piece and piece.Flip() all the pieces from GetFlippablePieces.
    "

    class Board {
        - int _size
        - Piece?[,] _grid
        + Board(int size = 8)
        - InitBoard(): void
        + GetBoard(): Piece?[,]
    }

    class Piece {
        + PieceColor Color \\get; private set;
        + Action Flip \\get;
        + Piece(PieceColor color)
    }

    class Player {
        + PieceColor Color \\get;
        + int Score
        + Player(PieceColor color)
    }

    class Position {
        <<struct>>
        int Row
        int Col
        Position(int row, int col)
    }

    class PieceColor {
        <<enum>>
        Black
        White
    }
    %% Black marked with X, White marked with O

    class GameState {
        <<enum>>
        Playing
        Finished
    }

    class IDisplay {
        <<Interface>>
        + DisplayBoard(Board, List~Position~)
        + DisplayMessage(string)
        + AskNonNullInput()
    }

    class IBoard {
        <<Interface>>
        + GetBoard(): Piece?[,]
    }

    class IPiece {
        <<Interface>>
        + PieceColor Color
        + Action Flip
    }

    class IPlayer {
        <<Interface>>
        + PieceColor Color
        + int Score
    }


%% Rules:

%% 2 players (Black & White), on 8x8 board.

%% Initial board: 4 pieces at the center with this configuration:
%% W B      or      O X
%% B W              X O

%% Black moves first.

%% Black (White) place a black (white) piece on the board, 
%% in such a way that there is at least one straight 
%% (horizontal, vertical, or diagonal) occupied line 
%% between the new piece and another black (white) piece, 
%% with one or more contiguous white (black) pieces between them.

%% After placing the piece, 
%% Black (White) flips all white pieces lying on a straight line
%% between the new piece and any existing black (white) pieces.

%% All flipped pieces are now black (white).

%% Players alternate taking turns.

%% If a player does not have any valid moves,
%% play passes back to the other player.

%% When neither player can move, the game ends.

%% A game of Othello may end before the board is completely filled.

%% The player with the most pieces on the board at the end of the game wins.

%% If both players have the same number of pieces, then the game is a draw.
