classDiagram
    GameController --> Board : manages
    GameController --> Player : manages
    GameState -- GameController
    Display <-- GameController
    Board *-- Piece : contains
    Position <-- Board : uses
    Player --> Piece : owns
    Player -- PieceColor
    Piece -- PieceColor

    class Display {
        <<static>>
        + DisplayBoard(Board board, List~Position~ validmoves): void
        + DisplayMessage(string message): void
    }
    note for Display "Message example:
    Enter 'exit' to quit the game.
    X = 2 | O = 3
    X turn, enter your move < row col >: 
    "

    class GameController {
        - Board _board
        - Player[] _players
        - int _currentPlayer
        - GameState _gameState
        + GameController(Board board)
        + Play(): void
        - SwitchTurn(): void
        - GetAnyFlippablePieces(Player player): List~Position~
        - GetValidMoves(Player player): List~Position~
        - IsValidMove(int row, int col, Player player): bool
        - Func~int row, int col~ WithinBoardBound: bool
        - TryParseMove(string input, out int row, out int col): bool
        - PlacePiece(int row, int col, Player player): bool
        - CountScores(): (int blackCount, int whiteCount) \\ loop the piece in _board
        + Action~Board~ OnBoardUpdated
        + Action~GameState~ OnGameOver
    }
    note for GameController "Player instantiated immediately in the constructor bcs there r always only 2 players.
    GetAnyFlippablePieces() used inside GetValidMoves();
    GetValidMoves() used inside IsValidMove(), it also can be used for showing all possible moves on the board;
    IsValidMove() used inside PlacePiece(); PlacePiece() used inside Play().
    PlacePiece() has mechanism for flipping all the pieces needed to be flipped when placement happens
    and it calls piece.Flip() for each pieces in question.
    "

    class Board {
        - int _size
        - Piece?[,] _grid
        + Board(int size = 8)
        - InitBoard(): void
        + GetBoard(): Piece?[,]
    }
    note for Board "InitBoard() called in constructor.
    Piece in _grid is nullable."

    class Piece {
        - PieceColor _color
        + Piece(PieceColor color)
        + Flip(): void
    }

    class Player {
        - PieceColor _color
        + int Scores
        + Player(PieceColor color)
    }

    class Position {
        <<struct>>
        int Row
        int Col
        Position(int row, int col)
    }

    class PieceColor {
        <<enum>>
        Black
        White
    }
    %% Black marked with X, White marked with O

    class GameState {
        <<enum>>
        Playing
        Finished
    }


%% Rules:

%% 2 players (Black & White), on 8x8 board.

%% Initial board: 4 pieces at the center with this configuration:
%% W B
%% B W

%% Black moves first.

%% Black (White) place a black (white) piece on the board, 
%% in such a way that there is at least one straight 
%% (horizontal, vertical, or diagonal) occupied line 
%% between the new piece and another black (white) piece, 
%% with one or more contiguous white (black) pieces between them.

%% After placing the piece, 
%% Black (White) flips all white pieces lying on a straight line
%% between the new piece and any existing black (white) pieces.

%% All flipped pieces are now black (white).

%% Players alternate taking turns.

%% If a player does not have any valid moves,
%% play passes back to the other player.

%% When neither player can move, the game ends.

%% A game of Othello may end before the board is completely filled.

%% The player with the most pieces on the board at the end of the game wins.

%% If both players have the same number of pieces, then the game is a draw.
