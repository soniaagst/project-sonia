// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParkingSystem.Persistence.Data;

#nullable disable

namespace ParkingSystem.Persistence.Migrations
{
    [DbContext(typeof(ParkingDbContext))]
    [Migration("20250509232243_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("ParkingSystem.Domain.Models.ParkingLotConfig", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("BikeSlotCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarSlotCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.ToTable("ParkingLotConfigs");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Slot", b =>
                {
                    b.Property<int>("SlotNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AllowedType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ParkedVehicleLicensePlate")
                        .HasColumnType("TEXT");

                    b.HasKey("SlotNumber");

                    b.HasIndex("ParkedVehicleLicensePlate");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EnterTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleLicensePlate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("VehicleLicensePlate");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Vehicle", b =>
                {
                    b.Property<string>("LicensePlate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("LicensePlate");

                    b.HasIndex("OwnerId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Slot", b =>
                {
                    b.HasOne("ParkingSystem.Domain.Models.Vehicle", "ParkedVehicle")
                        .WithMany()
                        .HasForeignKey("ParkedVehicleLicensePlate");

                    b.Navigation("ParkedVehicle");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Ticket", b =>
                {
                    b.HasOne("ParkingSystem.Domain.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleLicensePlate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ParkingSystem.Domain.Models.Vehicle", b =>
                {
                    b.HasOne("ParkingSystem.Domain.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });
#pragma warning restore 612, 618
        }
    }
}
